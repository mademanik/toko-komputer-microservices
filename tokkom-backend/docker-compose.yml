---
version: '3.7'
services:
  ##MySQL Docker Compose Config
  mysql-order-service:
    container_name: mysql-order-service
    image: mysql:latest
    volumes:
      - ./docker-compose-config/mysql-order-service:/var/lib/mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: tokkom_order_db
    restart: always

  ##Postgres Docker Compose Config
  postgres-notification-service:
    container_name: postgres-notification-service
    image: postgres:latest
    volumes:
      - ./docker-compose-config/postgres-notification-service:/data/postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: notification_service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /data/postgres
    restart: always

  ## Mongo Docker Compose Config
  mongo-product-service:
    container_name: mongo-product-service
    image: mongo:4.4.14-rc0-focal
    volumes:
      - ./docker-compose-config/mongo-product-service:/data/db
    ports:
      - "27017:27017"
    restart: always

  ## Zipkin Docker Compose Config
  zipkin-tokkom:
    container_name: zipkin-tokkom
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    restart: always

  ## Redis Docker Compose Config
  redis-tokkom:
    container_name: redis-tokkom
    image: redis
    ports:
      - "6379:6379"
    restart: always

  zookeeper-tokkom:
    container_name: zookeeper-tokkom
    image: confluentinc/cp-zookeeper:7.0.1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka-broker:
    container_name: kafka-broker
    image: confluentinc/cp-kafka:7.0.1
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper-tokkom
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper-tokkom:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka-broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  ## Eureka Server
  discovery-service:
    container_name: discovery-service
    image: mademanik/discovery-service-tokkom:latest
    pull_policy: always
    ports:
      - "8761:8761"
    environment:
      SPRING_APPLICATION_JSON: '{
              "server.port"  : "8761",
              "spring.zipkin.base-url" : "http://zipkin-tokkom:9411"
            }'
    depends_on:
      - zipkin-tokkom

  ## Gateway Server
  gateway-service:
    container_name: gateway-service
    image: mademanik/gateway-service-tokkom:latest
    pull_policy: always
    ports:
      - "8080:8080"
    environment:
      SPRING_APPLICATION_JSON: '{
              "server.port"  : "8080",
              "eureka.client.serviceUrl.defaultZone" : "http://eureka:password@discovery-service:8761/eureka",
              "spring.zipkin.base-url"  : "http://zipkin-tokkom:9411"
            }'
    depends_on:
      - zipkin-tokkom
      - discovery-service

  ## Notification Server
  notification-service:
    container_name: notification-service
    image: mademanik/notification-service-tokkom:latest
    pull_policy: always
    environment:
      SPRING_APPLICATION_JSON: '{
              "spring.datasource.url"  : "jdbc:postgresql://postgres-notification-service:5432/notification_service",
              "spring.datasource.username" : "postgres",
              "spring.datasource.password"  : "postgres",
              "spring.jpa.hibernate.ddl-auto"  : "update",
              "eureka.client.serviceUrl.defaultZone"  : "http://eureka:password@discovery-service:8761/eureka",
              "spring.zipkin.base-url"  : "http://zipkin-tokkom:9411",
              "spring.kafka.bootstrap-servers"  : "kafka-broker:29092"
            }'
    depends_on:
      - zipkin-tokkom
      - discovery-service
      - kafka-broker
      - gateway-service
      - postgres-notification-service

  ## Order Server
  order-service:
    container_name: order-service
    image: mademanik/order-service-tokkom:latest
    pull_policy: always
    environment:
      SPRING_APPLICATION_JSON: '{
              "spring.datasource.url" : "jdbc:mysql://mysql-order-service:3306/tokkom_order_db?allowPublicKeyRetrieval=true&useSSL=false",
              "spring.datasource.username"  : "root",
              "spring.datasource.password"  : "root",
              "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.MySQL5InnoDBDialect",
              "spring.jpa.hibernate.ddl-auto" : "update",
              "server.port"  : "8080",
              "spring.zipkin.base-url"  : "http://zipkin-tokkom:9411",
              "eureka.client.serviceUrl.defaultZone"  : "http://eureka:password@discovery-service:8761/eureka",
              "spring.kafka.bootstrap-servers"  : "kafka-broker:29092",
              "productStockUrl"  : "http://gateway-service:8080/tokkom/api/product/stock/"
            }'
    depends_on:
      - zipkin-tokkom
      - discovery-service
      - kafka-broker
      - gateway-service
      - mysql-order-service

  ## Product Server
  product-service:
    container_name: product-service
    image: mademanik/product-service-tokkom:latest
    pull_policy: always
    environment:
      SPRING_APPLICATION_JSON: '{
              "spring.data.mongodb.host"  : "mongo-product-service",
              "spring.data.mongodb.port" : "27017",
              "spring.data.mongodb.database"  : "tokkom_product_db",
              "server.port"  : "8080",
              "spring.zipkin.base-url"  : "http://zipkin-tokkom:9411",
              "eureka.client.serviceUrl.defaultZone"  : "http://eureka:password@discovery-service:8761/eureka",
              "spring.cache.type"  : "redis",
              "spring.redis.host"  : "redis-tokkom",
              "spring.redis.port"  : "6379"
            }'
    depends_on:
      - zipkin-tokkom
      - discovery-service
      - gateway-service
      - mongo-product-service